"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FireFlyWebSocket = void 0;
const stream_1 = require("stream");
const WebSocket = require("ws");
const logger_1 = require("./logger");
function buildEphemeralQueryParams(sub) {
    var _a;
    const params = new URLSearchParams();
    params.append('ephemeral', 'true');
    params.append('namespace', sub.namespace);
    if (((_a = sub.filter) === null || _a === void 0 ? void 0 : _a.events) !== undefined) {
        params.append('filter.events', sub.filter.events);
    }
    return params.toString();
}
class FireFlyWebSocket {
    constructor(options, callback) {
        this.options = options;
        this.callback = callback;
        this.logger = new logger_1.default(FireFlyWebSocket.name);
        this.closed = () => { };
        this.disconnectDetected = false;
        this.connect();
    }
    connect() {
        // Ensure we've cleaned up any old socket
        this.close();
        if (this.reconnectTimer) {
            clearTimeout(this.reconnectTimer);
            delete this.reconnectTimer;
        }
        let url = `${this.options.host}/ws`;
        if (this.options.ephemeral !== undefined) {
            url += '?' + buildEphemeralQueryParams(this.options.ephemeral);
        }
        const auth = this.options.username && this.options.password
            ? `${this.options.username}:${this.options.password}`
            : undefined;
        const socket = (this.socket = new WebSocket(url, Object.assign(Object.assign({}, this.options.socketOptions), { auth, handshakeTimeout: this.options.heartbeatInterval })));
        this.closed = undefined;
        socket
            .on('open', () => {
            var _a;
            if (this.disconnectDetected) {
                this.disconnectDetected = false;
                this.logger.log('Connection restored');
            }
            else {
                this.logger.log('Connected');
            }
            this.schedulePing();
            for (const name of this.options.subscriptions) {
                socket.send(JSON.stringify({
                    type: 'start',
                    autoack: this.options.autoack,
                    namespace: this.options.namespace,
                    name,
                }));
                this.logger.log(`Started listening on subscription ${this.options.namespace}:${name}`);
            }
            if (((_a = this.options) === null || _a === void 0 ? void 0 : _a.afterConnect) !== undefined) {
                this.options.afterConnect(this);
            }
        })
            .on('error', (err) => {
            this.logger.error('Error', err.stack);
        })
            .on('close', () => {
            if (this.closed) {
                this.logger.log('Closed');
                this.closed(); // do this after all logging
            }
            else {
                this.disconnectDetected = true;
                this.reconnect('Closed by peer');
            }
        })
            .on('pong', () => {
            this.logger.debug(`WS received pong`);
            this.schedulePing();
        })
            .on('unexpected-response', (req, res) => {
            let responseData = '';
            res.pipe(new stream_1.Transform({
                transform(chunk, encoding, callback) {
                    responseData += chunk;
                    callback();
                },
                flush: () => {
                    this.reconnect(`FireFly connect error [${res.statusCode}]: ${responseData}`);
                },
            }));
        })
            .on('message', (data) => {
            const event = JSON.parse(data);
            this.callback(this, event);
        });
    }
    clearPingTimers() {
        if (this.disconnectTimer) {
            clearTimeout(this.disconnectTimer);
            delete this.disconnectTimer;
        }
        if (this.pingTimer) {
            clearTimeout(this.pingTimer);
            delete this.pingTimer;
        }
    }
    schedulePing() {
        this.clearPingTimers();
        this.disconnectTimer = setTimeout(() => this.reconnect('Heartbeat timeout'), Math.ceil(this.options.heartbeatInterval * 1.5));
        this.pingTimer = setTimeout(() => {
            var _a;
            this.logger.debug(`WS sending ping`);
            (_a = this.socket) === null || _a === void 0 ? void 0 : _a.ping('ping', true, (err) => {
                if (err)
                    this.reconnect(err.message);
            });
        }, this.options.heartbeatInterval);
    }
    reconnect(msg) {
        if (!this.reconnectTimer) {
            this.close();
            this.logger.error(`Websocket closed: ${msg}`);
            if (this.options.reconnectDelay === -1) {
                // do not attempt to reconnect
            }
            else {
                this.reconnectTimer = setTimeout(() => this.connect(), this.options.reconnectDelay);
            }
        }
    }
    send(json) {
        if (this.socket !== undefined) {
            this.socket.send(JSON.stringify(json));
        }
    }
    ack(event) {
        if (this.socket !== undefined && event.id !== undefined) {
            this.socket.send(JSON.stringify({
                type: 'ack',
                id: event.id,
                subscription: event.subscription,
            }));
        }
    }
    close(wait) {
        return __awaiter(this, void 0, void 0, function* () {
            const closedPromise = new Promise((resolve) => {
                this.closed = resolve;
            });
            this.clearPingTimers();
            if (this.socket) {
                try {
                    this.socket.close();
                }
                catch (e) {
                    this.logger.warn(`Failed to clean up websocket: ${e.message}`);
                }
                if (wait)
                    yield closedPromise;
                this.socket = undefined;
            }
        });
    }
}
exports.FireFlyWebSocket = FireFlyWebSocket;
