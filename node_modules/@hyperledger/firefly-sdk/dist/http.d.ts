import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
import { FireFlyOptions, FireFlyOptionsInput, FireFlyCreateOptions, FireFlyGetOptions, FireFlyError, FireFlyReplaceOptions, FireFlyUpdateOptions, FireFlyDeleteOptions, FireFlyGetWithStatus } from './interfaces';
export declare function mapConfig(options: FireFlyGetOptions | FireFlyGetWithStatus | FireFlyUpdateOptions | FireFlyReplaceOptions | FireFlyCreateOptions | FireFlyDeleteOptions | undefined, params?: any): AxiosRequestConfig;
export default class HttpBase {
    protected options: FireFlyOptions;
    protected rootHttp: AxiosInstance;
    protected http: AxiosInstance;
    private errorHandler?;
    constructor(options: FireFlyOptionsInput);
    private setDefaults;
    protected wrapError<T>(response: Promise<AxiosResponse<T>>): Promise<AxiosResponse<T, any>>;
    protected getMany<T>(url: string, params?: any, options?: FireFlyGetOptions, root?: boolean): Promise<T>;
    protected getOne<T>(url: string, options?: FireFlyGetOptions, params?: any, root?: boolean): Promise<T | undefined>;
    protected createOne<T>(url: string, data: any, options?: FireFlyCreateOptions): Promise<T>;
    protected updateOne<T>(url: string, data: any, options?: FireFlyUpdateOptions): Promise<T>;
    protected replaceOne<T>(url: string, data: any, options?: FireFlyReplaceOptions): Promise<T>;
    protected deleteOne<T>(url: string, options?: FireFlyDeleteOptions): Promise<void>;
    onError(handler: (err: FireFlyError) => void): void;
}
