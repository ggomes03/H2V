/// <reference types="node" />
import * as http from 'http';
import { AxiosRequestConfig } from 'axios';
import * as WebSocket from 'ws';
import { operations } from './schema';
/**
 * Most types in this file are aliased from request/response body types that
 * are generated from the OpenAPI specification for FireFly.
 *
 * Because the spec doesn't accurately reflect "required" fields, currently
 * all request types below mark every field as optional, and response types
 * mark every field as being set. This is not completely accurate, but should
 * be close enough for most use cases.
 */
export declare class FireFlyError extends Error {
    originalError?: Error | undefined;
    path?: string | undefined;
    constructor(message?: string, originalError?: Error | undefined, path?: string | undefined);
}
export declare class FireFlyIdempotencyError extends FireFlyError {
}
interface FireFlyBaseHttpOptions {
    requestConfig?: AxiosRequestConfig;
}
export interface FireFlyGetOptions extends FireFlyBaseHttpOptions {
}
export interface FireFlyUpdateOptions extends FireFlyBaseHttpOptions {
}
export interface FireFlyReplaceOptions extends FireFlyBaseHttpOptions {
}
export interface FireFlyDeleteOptions extends FireFlyBaseHttpOptions {
}
export interface FireFlyCreateOptions extends FireFlyBaseHttpOptions {
    confirm?: boolean;
    publish?: boolean;
}
export interface FireFlyGetWithStatus extends FireFlyGetOptions {
    fetchstatus?: string;
}
export interface FireFlyOptionsInput {
    host: string;
    namespace?: string;
    username?: string;
    password?: string;
    baseURL?: string;
    namespaceBaseURL?: string;
    websocket?: {
        host?: string;
        reconnectDelay?: number;
        heartbeatInterval?: number;
    };
    requestConfig?: AxiosRequestConfig;
}
export interface FireFlyOptions extends FireFlyOptionsInput {
    namespace: string;
    websocket: {
        host: string;
        reconnectDelay: number;
        heartbeatInterval: number;
    };
}
export interface FireFlyWebSocketSender {
    send: (json: JSON) => void;
}
export interface FireFlyWebSocketConnectCallback {
    (sender: FireFlyWebSocketSender): void | Promise<void>;
}
export interface FireFlyWebSocketOptions {
    host: string;
    namespace: string;
    subscriptions: string[];
    username?: string;
    password?: string;
    ephemeral?: FireFlyEphemeralSubscription;
    autoack?: boolean;
    noack?: boolean;
    reconnectDelay: number;
    heartbeatInterval: number;
    socketOptions?: WebSocket.ClientOptions | http.ClientRequestArgs;
    afterConnect?: FireFlyWebSocketConnectCallback;
}
export declare type FireFlyNamespaceResponse = Required<operations['getNamespace']['responses']['200']['content']['application/json']>;
export declare type FireFlyIdentityFilter = operations['getIdentities']['parameters']['query'];
export declare type FireFlyOrganizationFilter = operations['getNetworkOrgs']['parameters']['query'];
export declare type FireFlyNodeFilter = operations['getNetworkNodes']['parameters']['query'];
export declare type FireFlyVerifierFilter = operations['getVerifiers']['parameters']['query'];
export declare type FireFlyIdentityRequest = operations['postNewIdentity']['requestBody']['content']['application/json'];
export declare type FireFlyUpdateIdentityRequest = operations['patchUpdateIdentity']['requestBody']['content']['application/json'];
export declare type FireFlyIdentityResponse = Required<operations['getIdentityByID']['responses']['200']['content']['application/json']>;
export declare type FireFlyIdentitiesResponse = Required<operations['getIdentities']['responses']['200']['content']['application/json']>;
export declare type FireFlyOrganizationResponse = Required<operations['getNetworkOrg']['responses']['200']['content']['application/json']>;
export declare type FireFlyNodeResponse = Required<operations['getNetworkNode']['responses']['200']['content']['application/json']>;
export declare type FireFlyVerifierResponse = Required<operations['getVerifierByID']['responses']['200']['content']['application/json']>;
export declare type FireFlyStatusResponse = Required<operations['getStatus']['responses']['200']['content']['application/json']>;
export declare type FireFlySubscriptionFilter = operations['getSubscriptions']['parameters']['query'];
export declare type FireFlySubscriptionRequest = operations['postNewSubscription']['requestBody']['content']['application/json'];
export declare type FireFlySubscriptionResponse = Required<operations['getSubscriptionByID']['responses']['200']['content']['application/json']> & {
    status?: any;
};
export declare type FireFlyEventResponse = Required<operations['getEventByID']['responses']['200']['content']['application/json']>;
export declare type FireFlyVerifierResolveRequest = Required<operations['postVerifiersResolveNamespace']['requestBody']['content']['application/json']>;
export declare type FireFlyVerifierResolveResponse = Required<operations['postVerifiersResolveNamespace']['responses']['200']['content']['application/json']>;
export interface FireFlySubscriptionBase {
    filter?: {
        events?: string;
    };
    options?: {
        firstEvent?: string;
        readAhead?: number;
        withData?: boolean;
    };
}
export interface FireFlyEphemeralSubscription extends FireFlySubscriptionBase {
    namespace: string;
}
export interface FireFlyEnrichedEvent extends FireFlyEventResponse {
    blockchainEvent?: FireFlyBlockchainEventResponse;
    contractAPI?: FireFlyContractAPIResponse;
    contractInterface?: FireFlyContractInterfaceResponse;
    datatype?: FireFlyDatatypeResponse;
    identity?: FireFlyIdentityResponse;
    message?: FireFlyMessageResponse;
    tokenApproval?: FireFlyTokenApprovalResponse;
    tokenPool?: FireFlyTokenPoolResponse;
    tokenTransfer?: FireFlyTokenTransferResponse;
    transaction?: FireFlyTransactionResponse;
    operation?: FireFlyOperationResponse;
}
export interface FireFlyEventDelivery extends Omit<FireFlyEnrichedEvent, 'type'> {
    type: FireFlyEnrichedEvent['type'] | 'protocol_error';
    subscription: {
        id: string;
        name: string;
        namespace: string;
    };
}
export interface FireFlyEventBatchDelivery {
    type: 'event_batch';
    id: string;
    subscription: {
        id: string;
        name: string;
        namespace: string;
    };
    events: FireFlyEventDelivery[];
}
export declare type FireFlyDatatypeFilter = operations['getDatatypes']['parameters']['query'];
export declare type FireFlyDatatypeRequest = operations['postNewDatatype']['requestBody']['content']['application/json'];
export declare type FireFlyDatatypeResponse = operations['getDatatypeByName']['responses']['200']['content']['application/json'];
export declare type FireFlyDataFilter = operations['getData']['parameters']['query'];
export declare type FireFlyDataRequest = operations['postData']['requestBody']['content']['application/json'];
export declare type FireFlyDataBlobRequest = operations['postData']['requestBody']['content']['multipart/form-data'];
export declare type FireFlyDataResponse = Required<operations['getDataByID']['responses']['200']['content']['application/json']>;
export declare const FireFlyDataBlobRequestDefaults: FireFlyDataBlobRequest;
export declare type FireFlyMessageFilter = operations['getMsgs']['parameters']['query'];
export declare type FireFlyBatchFilter = operations['getBatches']['parameters']['query'];
export declare type FireFlyBroadcastMessageRequest = operations['postNewMessageBroadcast']['requestBody']['content']['application/json'];
export declare type FireFlyPrivateMessageRequest = operations['postNewMessagePrivate']['requestBody']['content']['application/json'];
export declare type FireFlyMessageResponse = Required<operations['getMsgByID']['responses']['200']['content']['application/json']>;
export declare type FireFlyBatchResponse = Required<operations['getBatchByID']['responses']['200']['content']['application/json']>;
export declare type FireFlyGroupResponse = Required<operations['getGroupByHash']['responses']['200']['content']['application/json']>;
export interface FireFlyPrivateSendOptions extends FireFlyCreateOptions {
    requestReply?: boolean;
}
export declare type FireFlyTokenPoolFilter = operations['getTokenPools']['parameters']['query'];
export declare type FireFlyTokenPoolRequest = operations['postTokenPool']['requestBody']['content']['application/json'];
export declare type FireFlyTokenPoolResponse = Required<operations['getTokenPoolByNameOrID']['responses']['200']['content']['application/json']>;
export declare type FireFlyTokenTransferFilter = operations['getTokenTransfers']['parameters']['query'];
export declare type FireFlyTokenMintRequest = operations['postTokenMint']['requestBody']['content']['application/json'];
export declare type FireFlyTokenBurnRequest = operations['postTokenBurn']['requestBody']['content']['application/json'];
export declare type FireFlyTokenTransferRequest = operations['postTokenTransfer']['requestBody']['content']['application/json'];
export declare type FireFlyTokenTransferResponse = Required<operations['getTokenTransferByID']['responses']['200']['content']['application/json']>;
export declare type FireFlyTokenBalanceFilter = operations['getTokenBalances']['parameters']['query'];
declare type BalancesList = Required<operations['getTokenBalances']['responses']['200']['content']['application/json']>;
declare const balances: BalancesList;
export declare type FireFlyTokenBalanceResponse = typeof balances[0];
export declare type FireFlyTokenApprovalFilter = operations['getTokenApprovals']['parameters']['query'];
export declare type FireFlyTokenApprovalRequest = operations['postTokenApproval']['requestBody']['content']['application/json'];
declare type ApprovalsList = operations['getTokenApprovals']['responses']['200']['content']['application/json'];
declare const approvals: ApprovalsList;
export declare type FireFlyTokenApprovalResponse = typeof approvals[0];
export declare type FireFlyOperationFilter = operations['getOps']['parameters']['query'];
export declare type FireFlyTransactionFilter = operations['getTxns']['parameters']['query'];
export declare type FireFlyOperationResponse = Required<operations['getOpByID']['responses']['200']['content']['application/json']>;
export declare type FireFlyTransactionResponse = Required<operations['getTxnByID']['responses']['200']['content']['application/json']>;
export declare type FireFlyContractInterfaceFilter = operations['getContractInterfaces']['parameters']['query'];
export declare type FireFlyContractAPIFilter = operations['getContractAPIs']['parameters']['query'];
export declare type FireFlyContractListenerFilter = operations['getContractListeners']['parameters']['query'];
export declare type FireFlyDeployContractRequest = operations['postContractDeploy']['requestBody']['content']['application/json'];
export declare type FireFlyContractGenerateRequest = operations['postGenerateContractInterface']['requestBody']['content']['application/json'];
export declare type FireFlyContractInterfaceRequest = operations['postNewContractInterface']['requestBody']['content']['application/json'];
export declare type FireFlyContractAPIRequest = operations['postNewContractAPI']['requestBody']['content']['application/json'];
export declare type FireFlyContractListenerRequest = operations['postNewContractListener']['requestBody']['content']['application/json'];
export declare type FireFlyDeployContractResponse = Required<operations['postContractDeploy']['responses']['200']['content']['application/json']>;
export declare type FireFlyContractInterfaceResponse = Required<operations['getContractInterface']['responses']['200']['content']['application/json']>;
export declare type FireFlyContractAPIResponse = Required<operations['getContractAPIByName']['responses']['200']['content']['application/json']>;
export declare type FireFlyContractListenerResponse = Required<operations['getContractListenerByNameOrID']['responses']['200']['content']['application/json']>;
export declare type FireFlyContractInvokeRequest = operations['postContractInvoke']['requestBody']['content']['application/json'];
export declare type FireFlyContractAPIInvokeRequest = operations['postContractAPIInvoke']['requestBody']['content']['application/json'];
export declare type FireFlyContractInvokeResponse = Required<operations['postContractInvoke']['responses']['202']['content']['application/json']>;
export declare type FireFlyContractQueryRequest = operations['postContractQuery']['requestBody']['content']['application/json'];
export declare type FireFlyContractAPIQueryRequest = operations['postContractAPIQuery']['requestBody']['content']['application/json'];
export declare type FireFlyContractQueryResponse = Required<operations['postContractQuery']['responses']['200']['content']['application/json']>;
export declare type FireFlyBlockchainEventFilter = operations['getBlockchainEvents']['parameters']['query'];
export declare type FireFlyBlockchainEventResponse = Required<operations['getBlockchainEventByID']['responses']['200']['content']['application/json']>;
export {};
