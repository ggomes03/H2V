"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var logLevels;
(function (logLevels) {
    logLevels[logLevels["LEVEL_NONE"] = 0] = "LEVEL_NONE";
    logLevels[logLevels["LEVEL_ERROR"] = 1] = "LEVEL_ERROR";
    logLevels[logLevels["LEVEL_WARN"] = 2] = "LEVEL_WARN";
    logLevels[logLevels["LEVEL_LOG"] = 3] = "LEVEL_LOG";
    logLevels[logLevels["LEVEL_INFO"] = 4] = "LEVEL_INFO";
    logLevels[logLevels["LEVEL_DEBUG"] = 5] = "LEVEL_DEBUG";
    logLevels[logLevels["LEVEL_TRACE"] = 6] = "LEVEL_TRACE";
})(logLevels || (logLevels = {}));
class Logger {
    constructor(prefix) {
        this.prefix = prefix;
        this.logLevel = logLevels.LEVEL_LOG;
        switch (process.env.FF_SDK_LOG_LEVEL) {
            case 'NONE':
                this.logLevel = logLevels.LEVEL_NONE;
                break;
            case 'ERROR':
                this.logLevel = logLevels.LEVEL_ERROR;
                break;
            case 'WARN':
                this.logLevel = logLevels.LEVEL_WARN;
                break;
            case 'LOG':
                this.logLevel = logLevels.LEVEL_LOG;
                break;
            case 'INFO':
                this.logLevel = logLevels.LEVEL_INFO;
                break;
            case 'DEBUG':
                this.logLevel = logLevels.LEVEL_DEBUG;
                break;
            case 'TRACE':
                this.logLevel = logLevels.LEVEL_TRACE;
                break;
        }
    }
    formatMessage(message) {
        const now = new Date().toISOString();
        return `${now} [${this.prefix}] ${message}`;
    }
    error(message, ...optionalParams) {
        this.logLevel >= logLevels.LEVEL_ERROR && console.error(this.formatMessage(message), ...optionalParams);
    }
    warn(message, ...optionalParams) {
        this.logLevel >= logLevels.LEVEL_WARN && console.warn(this.formatMessage(message), ...optionalParams);
    }
    log(message, ...optionalParams) {
        this.logLevel >= logLevels.LEVEL_LOG && console.log(this.formatMessage(message), ...optionalParams);
    }
    info(message, ...optionalParams) {
        this.logLevel >= logLevels.LEVEL_INFO && console.info(this.formatMessage(message), ...optionalParams);
    }
    debug(message, ...optionalParams) {
        this.logLevel >= logLevels.LEVEL_DEBUG && console.debug(this.formatMessage(message), ...optionalParams);
    }
    trace(message, ...optionalParams) {
        this.logLevel >= logLevels.LEVEL_TRACE && console.trace(this.formatMessage(message), ...optionalParams);
    }
}
exports.default = Logger;
