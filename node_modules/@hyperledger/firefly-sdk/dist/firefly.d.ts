/// <reference types="node" />
import { Readable } from 'stream';
import * as http from 'http';
import * as FormData from 'form-data';
import * as WebSocket from 'ws';
import { FireFlyStatusResponse, FireFlyPrivateSendOptions, FireFlyCreateOptions, FireFlyGetOptions, FireFlyWebSocketOptions, FireFlySubscriptionBase, FireFlyBatchFilter, FireFlyContractListenerFilter, FireFlyOrganizationResponse, FireFlyVerifierResponse, FireFlyOrganizationFilter, FireFlyVerifierFilter, FireFlyNodeFilter, FireFlyNodeResponse, FireFlyBroadcastMessageRequest, FireFlyMessageResponse, FireFlyMessageFilter, FireFlyPrivateMessageRequest, FireFlyTokenTransferRequest, FireFlyTokenMintRequest, FireFlyTokenBurnRequest, FireFlyDatatypeResponse, FireFlyDatatypeFilter, FireFlyDatatypeRequest, FireFlyBatchResponse, FireFlyDataResponse, FireFlyTokenTransferResponse, FireFlyTokenBalanceResponse, FireFlyTokenBalanceFilter, FireFlySubscriptionFilter, FireFlySubscriptionResponse, FireFlySubscriptionRequest, FireFlyTokenPoolRequest, FireFlyTokenPoolResponse, FireFlyTokenPoolFilter, FireFlyTransactionResponse, FireFlyContractListenerRequest, FireFlyContractListenerResponse, FireFlyContractInterfaceRequest, FireFlyContractInterfaceResponse, FireFlyContractGenerateRequest, FireFlyContractAPIRequest, FireFlyContractAPIResponse, FireFlyContractInterfaceFilter, FireFlyContractAPIFilter, FireFlyTransactionFilter, FireFlyOperationFilter, FireFlyOperationResponse, FireFlyTokenTransferFilter, FireFlyContractInvokeResponse, FireFlyContractQueryResponse, FireFlyContractAPIInvokeRequest, FireFlyContractAPIQueryRequest, FireFlyContractInvokeRequest, FireFlyContractQueryRequest, FireFlyDataRequest, FireFlyIdentityFilter, FireFlyIdentityResponse, FireFlyIdentitiesResponse, FireFlyDataFilter, FireFlyIdentityRequest, FireFlyGroupResponse, FireFlyBlockchainEventFilter, FireFlyBlockchainEventResponse, FireFlyDataBlobRequest, FireFlyVerifierResolveRequest, FireFlyVerifierResolveResponse, FireFlyTokenApprovalRequest, FireFlyNamespaceResponse, FireFlyUpdateIdentityRequest, FireFlyReplaceOptions, FireFlyUpdateOptions, FireFlyDeleteOptions, FireFlyTokenApprovalFilter, FireFlyTokenApprovalResponse, FireFlyDeployContractRequest, FireFlyDeployContractResponse, FireFlyWebSocketConnectCallback, FireFlyGetWithStatus } from './interfaces';
import { FireFlyWebSocket, FireFlyWebSocketCallback } from './websocket';
import HttpBase from './http';
export default class FireFly extends HttpBase {
    private queue;
    getStatus(options?: FireFlyGetOptions): Promise<FireFlyStatusResponse>;
    getIdentities(filter?: FireFlyIdentityFilter, options?: FireFlyGetOptions): Promise<FireFlyIdentitiesResponse>;
    getIdentity(id: string, options?: FireFlyGetOptions): Promise<FireFlyIdentityResponse | undefined>;
    createIdentity(identity: FireFlyIdentityRequest, options?: FireFlyCreateOptions): Promise<FireFlyIdentityResponse>;
    updateIdentity(id: string, update: FireFlyUpdateIdentityRequest, options?: FireFlyUpdateOptions): Promise<FireFlyIdentityResponse>;
    getOrganizations(filter?: FireFlyOrganizationFilter, options?: FireFlyGetOptions): Promise<FireFlyOrganizationResponse[]>;
    getOrganization(nameOrId: string, options?: FireFlyGetOptions): Promise<FireFlyIdentityResponse | undefined>;
    getNodes(filter?: FireFlyNodeFilter, options?: FireFlyGetOptions): Promise<FireFlyNodeResponse[]>;
    getNode(nameOrId: string, options?: FireFlyGetOptions): Promise<FireFlyIdentityResponse | undefined>;
    getVerifiers(namespace?: string, filter?: FireFlyVerifierFilter, options?: FireFlyGetOptions): Promise<FireFlyVerifierResponse[]>;
    getNamespace(name: string, options?: FireFlyGetOptions): Promise<FireFlyNamespaceResponse | undefined>;
    getNamespaces(options?: FireFlyGetOptions): Promise<FireFlyNamespaceResponse[]>;
    getDatatypes(filter?: FireFlyDatatypeFilter, options?: FireFlyGetOptions): Promise<FireFlyDatatypeResponse[]>;
    getDatatype(name: string, version: string, options?: FireFlyGetOptions): Promise<FireFlyDatatypeResponse | undefined>;
    createDatatype(req: FireFlyDatatypeRequest, options?: FireFlyCreateOptions): Promise<FireFlyDatatypeResponse>;
    getSubscriptions(filter?: FireFlySubscriptionFilter, options?: FireFlyGetOptions): Promise<FireFlySubscriptionResponse[]>;
    getSubscription(id: string, options?: FireFlyGetWithStatus): Promise<FireFlySubscriptionResponse | undefined>;
    replaceSubscription(sub: FireFlySubscriptionRequest, options?: FireFlyReplaceOptions): Promise<FireFlySubscriptionResponse>;
    deleteSubscription(subId: string, options?: FireFlyDeleteOptions): Promise<void>;
    getData(id: string, options?: FireFlyGetOptions): Promise<FireFlyDataResponse | undefined>;
    findData(filter?: FireFlyDataFilter | URLSearchParams, options?: FireFlyGetOptions): Promise<FireFlyDataResponse[]>;
    getDataBlob(id: string, options?: FireFlyGetOptions): Promise<Readable>;
    uploadData(data: FireFlyDataRequest, options?: FireFlyCreateOptions): Promise<FireFlyDataResponse>;
    publishData(id: string, options?: FireFlyCreateOptions): Promise<FireFlyDataResponse>;
    uploadDataBlob(blob: string | Buffer | Readable, blobOptions?: FormData.AppendOptions, dataOptions?: FireFlyDataBlobRequest, options?: FireFlyCreateOptions): Promise<FireFlyDataResponse>;
    publishDataBlob(id: string, options?: FireFlyCreateOptions): Promise<FireFlyDataResponse>;
    deleteData(id: string, options?: FireFlyDeleteOptions): Promise<void>;
    getBatches(filter?: FireFlyBatchFilter, options?: FireFlyGetOptions): Promise<FireFlyBatchResponse[]>;
    getMessages(filter?: FireFlyMessageFilter, options?: FireFlyGetOptions): Promise<FireFlyMessageResponse[]>;
    getMessage(id: string, options?: FireFlyGetOptions): Promise<FireFlyMessageResponse | undefined>;
    sendBroadcast(message: FireFlyBroadcastMessageRequest, options?: FireFlyCreateOptions): Promise<FireFlyMessageResponse>;
    sendPrivateMessage(message: FireFlyPrivateMessageRequest, options?: FireFlyPrivateSendOptions): Promise<FireFlyMessageResponse>;
    getGroup(hash: string, options?: FireFlyGetOptions): Promise<FireFlyGroupResponse | undefined>;
    createTokenPool(pool: FireFlyTokenPoolRequest, options?: FireFlyCreateOptions): Promise<FireFlyTokenPoolResponse>;
    getTokenPools(filter?: FireFlyTokenPoolFilter, options?: FireFlyGetOptions): Promise<FireFlyTokenPoolResponse[]>;
    getTokenPool(nameOrId: string, options?: FireFlyGetOptions): Promise<FireFlyTokenPoolResponse | undefined>;
    deleteTokenPool(nameOrId: string, options?: FireFlyDeleteOptions): Promise<void>;
    mintTokens(transfer: FireFlyTokenMintRequest, options?: FireFlyCreateOptions): Promise<Required<{
        amount?: string | undefined;
        blockchainEvent?: string | undefined;
        connector?: string | undefined;
        created?: string | undefined;
        from?: string | undefined;
        key?: string | undefined;
        localId?: string | undefined;
        message?: string | undefined;
        messageHash?: string | undefined;
        namespace?: string | undefined;
        pool?: string | undefined;
        protocolId?: string | undefined;
        to?: string | undefined;
        tokenIndex?: string | undefined;
        tx?: {
            id?: string | undefined;
            type?: string | undefined;
        } | undefined;
        type?: "mint" | "burn" | "transfer" | undefined;
        uri?: string | undefined;
    }>>;
    transferTokens(transfer: FireFlyTokenTransferRequest, options?: FireFlyCreateOptions): Promise<FireFlyTokenTransferResponse>;
    approveTokens(approval: FireFlyTokenApprovalRequest, options?: FireFlyCreateOptions): Promise<FireFlyTokenTransferResponse>;
    getTokenApprovals(filter?: FireFlyTokenApprovalFilter, options?: FireFlyGetOptions): Promise<FireFlyTokenApprovalResponse[]>;
    burnTokens(transfer: FireFlyTokenBurnRequest, options?: FireFlyCreateOptions): Promise<FireFlyTokenTransferResponse>;
    resolveVerifier(input: FireFlyVerifierResolveRequest, namespace?: string): Promise<FireFlyVerifierResolveResponse>;
    getTokenTransfers(filter?: FireFlyTokenTransferFilter, options?: FireFlyGetOptions): Promise<FireFlyTokenTransferResponse[]>;
    getTokenTransfer(id: string, options?: FireFlyGetOptions): Promise<FireFlyTokenTransferResponse | undefined>;
    getTokenBalances(filter?: FireFlyTokenBalanceFilter, options?: FireFlyGetOptions): Promise<FireFlyTokenBalanceResponse[]>;
    deployContract(request: FireFlyDeployContractRequest, options?: FireFlyCreateOptions): Promise<FireFlyDeployContractResponse>;
    generateContractInterface(request: FireFlyContractGenerateRequest, options?: FireFlyCreateOptions): Promise<FireFlyContractInterfaceRequest>;
    createContractInterface(ffi: FireFlyContractInterfaceRequest, options?: FireFlyCreateOptions): Promise<FireFlyContractInterfaceResponse>;
    getContractInterfaces(filter?: FireFlyContractInterfaceFilter, options?: FireFlyGetOptions): Promise<FireFlyContractInterfaceResponse[]>;
    getContractInterface(id: string, fetchchildren?: boolean, options?: FireFlyGetOptions): Promise<FireFlyContractInterfaceResponse | undefined>;
    createContractAPI(api: FireFlyContractAPIRequest, options?: FireFlyCreateOptions): Promise<FireFlyContractAPIResponse>;
    getContractAPIs(filter?: FireFlyContractAPIFilter, options?: FireFlyGetOptions): Promise<FireFlyContractAPIResponse[]>;
    getContractAPI(name: string, options?: FireFlyGetOptions): Promise<FireFlyContractAPIResponse | undefined>;
    invokeContract(request: FireFlyContractInvokeRequest, options?: FireFlyCreateOptions): Promise<FireFlyContractInvokeResponse>;
    queryContract(request: FireFlyContractQueryRequest, options?: FireFlyCreateOptions): Promise<FireFlyContractQueryResponse>;
    invokeContractAPI(apiName: string, methodPath: string, request: FireFlyContractAPIInvokeRequest, options?: FireFlyCreateOptions): Promise<FireFlyContractInvokeResponse>;
    queryContractAPI(apiName: string, methodPath: string, request: FireFlyContractAPIQueryRequest, options?: FireFlyCreateOptions): Promise<FireFlyContractQueryResponse>;
    createContractListener(listener: FireFlyContractListenerRequest, options?: FireFlyCreateOptions): Promise<FireFlyContractListenerResponse>;
    getContractListeners(filter?: FireFlyContractListenerFilter, options?: FireFlyGetOptions): Promise<FireFlyContractListenerResponse[]>;
    deleteContractListener(id: string, options?: FireFlyDeleteOptions): Promise<void>;
    getContractAPIListeners(apiName: string, eventPath: string, options?: FireFlyGetOptions): Promise<FireFlyContractListenerResponse[]>;
    createContractAPIListener(apiName: string, eventPath: string, listener: FireFlyContractListenerRequest, options?: FireFlyCreateOptions): Promise<Required<{
        backendId?: string | undefined;
        created?: string | undefined;
        event?: {
            description?: string | undefined;
            details?: {
                [key: string]: any;
            } | undefined;
            name?: string | undefined;
            params?: {
                name?: string | undefined;
                schema?: any;
            }[] | undefined;
        } | undefined;
        id?: string | undefined;
        interface?: {
            id?: string | undefined;
            name?: string | undefined;
            version?: string | undefined;
        } | undefined;
        location?: any;
        name?: string | undefined;
        namespace?: string | undefined;
        options?: {
            firstEvent?: string | undefined;
        } | undefined;
        signature?: string | undefined;
        topic?: string | undefined;
    }>>;
    getOperations(filter?: FireFlyOperationFilter, options?: FireFlyGetOptions): Promise<FireFlyOperationResponse[]>;
    getOperation(id: string, options?: FireFlyGetWithStatus): Promise<FireFlyOperationResponse | undefined>;
    retryOperation(id: string, options?: FireFlyCreateOptions): Promise<FireFlyOperationResponse>;
    getTransactions(filter?: FireFlyTransactionFilter, options?: FireFlyGetOptions): Promise<FireFlyTransactionResponse[]>;
    getTransaction(id: string, options?: FireFlyGetOptions): Promise<FireFlyTransactionResponse | undefined>;
    getBlockchainEvents(filter?: FireFlyBlockchainEventFilter, options?: FireFlyGetOptions): Promise<FireFlyBlockchainEventResponse[]>;
    getBlockchainEvent(id: string, options?: FireFlyGetOptions): Promise<FireFlyBlockchainEventResponse | undefined>;
    listen(subscriptions: string | string[] | FireFlySubscriptionBase, callback: FireFlyWebSocketCallback, socketOptions?: WebSocket.ClientOptions | http.ClientRequestArgs, fireflySocketOptions?: Partial<FireFlyWebSocketOptions> | FireFlyWebSocketConnectCallback): FireFlyWebSocket;
}
